<?php
/*
 * @file WidgetWraper.php
 * 
 * @brief Handle the Widgets
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

class WidgetWrapper
{
    private static $instance;

    private $_widgets = array();
    private $_events = array();

    private $css = array(); // All the css loaded by the widgets so far.
    private $js = array(); // All the js loaded by the widgets so far.

    private function __construct()
    {
        $this->registerAll();
    }

    public function registerAll($load = false)
    {
        $widgets_dir = scandir(APP_PATH ."widgets/");
        foreach($widgets_dir as $widget_dir) {
            if(is_dir(APP_PATH ."widgets/".$widget_dir) && 
                $widget_dir != '..' &&
                $widget_dir != '.') {

                if($load) $this->loadWidget($widget_dir, true);
                array_push($this->_widgets, $widget_dir);         
            }
        }
    }

    static function getInstance()
    {
        if(!is_object(self::$instance)) {
            self::$instance = new WidgetWrapper;
        }
        return self::$instance;
    }

    static function destroyInstance()
    {
        if(isset(self::$instance)) {
            self::$instance = null;
        }
    }

    /**
     * @desc Loads a widget and returns it
     * @param $name the name of the widget
     * @param $register know if we are loading in the daemon or displaying
     */
    public function loadWidget($name, $register = false)
    {
        // Attempting to load the user's widgets in priority
        $path = "";

        if(file_exists(APP_PATH . "widgets/$name/$name.php")) {
            $path = APP_PATH . "widgets/$name/$name.php";
        }
        else {
            throw new MovimException(
                __('error.widget_load_error', $name));
        }

        require_once($path);
        $widget = new $name();

        if($register) {
            // We save the registered events of the widget for the filter
            if(isset($widget->events)) {
                foreach($widget->events as $key => $value) {
                    if(is_array($this->_events)
                    && array_key_exists($key, $this->_events)) {
                        $we = $this->_events[$key];
                        array_push($we, $name);
                        $we = array_unique($we);
                        $this->_events[$key] = $we;
                    } else {
                        $this->_events[$key] = array($name);
                    }
                }
            }
        } else {
            // Collecting stuff generated by the widgets.
            $this->css = array_merge($this->css, $widget->loadcss());
            $this->js = array_merge($this->js, $widget->loadjs());
        }
    }

    /**
     * @desc Loads a widget and runs a particular function on it.
     *
     * @param $widget_name is the name of the widget.
     * @param $method is the function to be run.
     * @param $params is an array containing the parameters to
     *   be passed along to the method.
     * @return what the widget's method returns.
     */
    function runWidget($widget_name, $method, array $params = null)
    {
        /*if($this->register_widgets &&
           !in_array($widget_name, $this->loaded_widgets))
            $this->loaded_widgets[] = $widget_name;*/

        $this->loadWidget($widget_name);
        $widget = new $widget_name();//$this->loadWidget($widget_name);

        if(!is_array($params))
            $params = array();
        
        $result = call_user_func_array(array($widget, $method), $params);

        return $result;
    }

    /**
     * Calls a particular function with the given parameters on
     * all loaded widgets.
     *
     * @param $method is the method to be called on all widgets.
     * @param $params is an array of parameters passed to the method.
     */
    function iterate($method, array $params = NULL)
    {
        if(array_key_exists($method['type'],$this->_events)) {
            foreach($this->_events[$method['type']] as $name) {
                $widget = new $name();
                $widget->runEvents($method);
                unset($widget);
            }
        } else {
            /*throw new MovimException(
                __('error.widget_call_error', $method['type']));*/
        }
    }

    /**
     * @desc Returns the list of loaded CSS.
     */
    function loadcss()
    {
        return $this->css;
    }

    /**
     * @desc Returns the list of loaded javascripts.
     */
    function loadjs()
    {
        return $this->js;
    }
}
